{"version":3,"sources":["ipc.ts","index.ts"],"names":[],"mappings":";oEAAA,MAAA,EAAA,QAAA,YAIM,EAAM,IAAI,MAGZ,cACI,KAAK,UAAY,GAGrB,KAAK,KAAmB,GACpB,EAAA,YAAY,KAAK,KAAS,GAG9B,GAAG,EAAgB,GACf,EAAA,YAAY,GAAG,EAAM,GACrB,KAAK,UAAU,KAAK,CAAC,EAAM,IAG/B,UACI,IAAK,MAAO,EAAM,KAAa,KAAK,UAChC,EAAA,YAAY,eAAe,EAAM,GAErC,KAAK,UAAY,KAIzB,QAAA,QAAe;;wJC5Bf,MAAA,EAAA,EAAA,QAAA,UAEA,EAAA,QAAI,GAAG,kBAAmB,CAAC,EAAU,KACjC,QAAQ,IAAI","file":"preload.map","sourceRoot":"","sourcesContent":["import { ipcRenderer } from 'electron';\n\nexport type Listener = (event: Event, ...args: any[]) => void;\n\nconst ipc = new class {\n    private listeners: [IPC.Chan, Listener][];\n\n    constructor() {\n        this.listeners = [];\n    }\n\n    send(chan: IPC.Chan, ...args: any[]) {\n        ipcRenderer.send(chan, ...args);\n    }\n\n    on(chan: IPC.Chan, listener: Listener) {\n        ipcRenderer.on(chan, listener);\n        this.listeners.push([chan, listener]);\n    }\n\n    dispose() {\n        for (const [chan, listener] of this.listeners) {\n            ipcRenderer.removeListener(chan, listener);\n        }\n        this.listeners = [];\n    }\n}();\n\nexport default ipc;\n","import Ipc from './ipc';\n\nIpc.on('tweetapp:config', (_: Event, config: Config) => {\n    console.log(config);\n});\n"]}